import { RefObject } from 'react';

import { isNullOrUndefined } from './is-null-or-undefined';
import { safeInvoke } from './safe-invoke';


/**
 * Safely invoke the function with the `React.RefObject` if its `.current` attribute is not `null`, and return its value.
 * Otherwise, return undefined.
 *
 * @template R: Returned value of the original function
 * @template T: Object containing the `.current` reference attribute
 *
 * @param {RefObject<T>} refObject The ref object
 * @param {(ref: T) => R} func The func which requires the ref object for calculated results
 *
 * @returns {(R | undefined)} The calculated value generated by the wrapped function
 */
export const safeInvokeWithRef = function safeInvokeWithRef<R, T>(
  refObject: RefObject<T>,
  func: (ref: T) => R
): R | undefined {
  if (isNullOrUndefined(refObject.current)) {
    return undefined;
  }

  return safeInvoke(func, refObject.current);
};
